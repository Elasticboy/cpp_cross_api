// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_exchange.proto

#ifndef PROTOBUF_server_5fexchange_2eproto__INCLUDED
#define PROTOBUF_server_5fexchange_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace network_io {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_5fexchange_2eproto();
void protobuf_AssignDesc_server_5fexchange_2eproto();
void protobuf_ShutdownFile_server_5fexchange_2eproto();

class Request;
class DirContent;
class DirContent_File;
class Response;

enum Request_Type {
  Request_Type_SIMPLE = 0,
  Request_Type_EXPLORER = 1,
  Request_Type_KEYBOARD = 2,
  Request_Type_AI = 3,
  Request_Type_VOLUME = 4,
  Request_Type_APP = 5
};
bool Request_Type_IsValid(int value);
const Request_Type Request_Type_Type_MIN = Request_Type_SIMPLE;
const Request_Type Request_Type_Type_MAX = Request_Type_APP;
const int Request_Type_Type_ARRAYSIZE = Request_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Type_descriptor();
inline const ::std::string& Request_Type_Name(Request_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Type_descriptor(), value);
}
inline bool Request_Type_Parse(
    const ::std::string& name, Request_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Type>(
    Request_Type_descriptor(), name, value);
}
enum Request_Code {
  Request_Code_NONE = 0,
  Request_Code_DEFINE = 1,
  Request_Code_STATUS = 2,
  Request_Code_ON = 3,
  Request_Code_OFF = 4,
  Request_Code_HELLO = 5,
  Request_Code_TEST = 6,
  Request_Code_KILL_SERVER = 7,
  Request_Code_SHUTDOWN = 8,
  Request_Code_SWITCH_WINDOW = 9,
  Request_Code_LOCK = 10,
  Request_Code_UP = 11,
  Request_Code_DOWN = 12,
  Request_Code_LEFT = 13,
  Request_Code_RIGHT = 14,
  Request_Code_MUTE = 15,
  Request_Code_SAY = 16,
  Request_Code_GET_FILE_LIST = 20,
  Request_Code_OPEN_FILE = 21,
  Request_Code_MEDIA_PLAY_PAUSE = 30,
  Request_Code_MEDIA_STOP = 31,
  Request_Code_MEDIA_PREVIOUS = 32,
  Request_Code_MEDIA_NEXT = 33,
  Request_Code_MEDIA_FF = 34,
  Request_Code_MEDIA_REWIND = 35,
  Request_Code_KB_CTRL = 40,
  Request_Code_KB_SHIFT = 41,
  Request_Code_KB_ALT = 42,
  Request_Code_KB_ALTGR = 43,
  Request_Code_KB_WINDOWS = 44,
  Request_Code_KB_RETURN = 45,
  Request_Code_KB_SPACE = 46,
  Request_Code_KB_BACKSPACE = 47,
  Request_Code_KB_ESCAPE = 48,
  Request_Code_KB_TAB = 49,
  Request_Code_KB_F4 = 50,
  Request_Code_GOM_PLAYER_RUN = 60,
  Request_Code_GOM_PLAYER_KILL = 61,
  Request_Code_GOM_PLAYER_STRETCH = 62
};
bool Request_Code_IsValid(int value);
const Request_Code Request_Code_Code_MIN = Request_Code_NONE;
const Request_Code Request_Code_Code_MAX = Request_Code_GOM_PLAYER_STRETCH;
const int Request_Code_Code_ARRAYSIZE = Request_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Code_descriptor();
inline const ::std::string& Request_Code_Name(Request_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Code_descriptor(), value);
}
inline bool Request_Code_Parse(
    const ::std::string& name, Request_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Code>(
    Request_Code_descriptor(), name, value);
}
enum DirContent_File_FileType {
  DirContent_File_FileType_DIRECTORY = 0,
  DirContent_File_FileType_FILE = 1
};
bool DirContent_File_FileType_IsValid(int value);
const DirContent_File_FileType DirContent_File_FileType_FileType_MIN = DirContent_File_FileType_DIRECTORY;
const DirContent_File_FileType DirContent_File_FileType_FileType_MAX = DirContent_File_FileType_FILE;
const int DirContent_File_FileType_FileType_ARRAYSIZE = DirContent_File_FileType_FileType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DirContent_File_FileType_descriptor();
inline const ::std::string& DirContent_File_FileType_Name(DirContent_File_FileType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DirContent_File_FileType_descriptor(), value);
}
inline bool DirContent_File_FileType_Parse(
    const ::std::string& name, DirContent_File_FileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DirContent_File_FileType>(
    DirContent_File_FileType_descriptor(), name, value);
}
enum Response_ReturnCode {
  Response_ReturnCode_RC_SUCCESS = 0,
  Response_ReturnCode_RC_ERROR = 1
};
bool Response_ReturnCode_IsValid(int value);
const Response_ReturnCode Response_ReturnCode_ReturnCode_MIN = Response_ReturnCode_RC_SUCCESS;
const Response_ReturnCode Response_ReturnCode_ReturnCode_MAX = Response_ReturnCode_RC_ERROR;
const int Response_ReturnCode_ReturnCode_ARRAYSIZE = Response_ReturnCode_ReturnCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_ReturnCode_descriptor();
inline const ::std::string& Response_ReturnCode_Name(Response_ReturnCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_ReturnCode_descriptor(), value);
}
inline bool Response_ReturnCode_Parse(
    const ::std::string& name, Response_ReturnCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_ReturnCode>(
    Response_ReturnCode_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_Type Type;
  static const Type SIMPLE = Request_Type_SIMPLE;
  static const Type EXPLORER = Request_Type_EXPLORER;
  static const Type KEYBOARD = Request_Type_KEYBOARD;
  static const Type AI = Request_Type_AI;
  static const Type VOLUME = Request_Type_VOLUME;
  static const Type APP = Request_Type_APP;
  static inline bool Type_IsValid(int value) {
    return Request_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Request_Type_Type_MIN;
  static const Type Type_MAX =
    Request_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Request_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Request_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Request_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Request_Type_Parse(name, value);
  }

  typedef Request_Code Code;
  static const Code NONE = Request_Code_NONE;
  static const Code DEFINE = Request_Code_DEFINE;
  static const Code STATUS = Request_Code_STATUS;
  static const Code ON = Request_Code_ON;
  static const Code OFF = Request_Code_OFF;
  static const Code HELLO = Request_Code_HELLO;
  static const Code TEST = Request_Code_TEST;
  static const Code KILL_SERVER = Request_Code_KILL_SERVER;
  static const Code SHUTDOWN = Request_Code_SHUTDOWN;
  static const Code SWITCH_WINDOW = Request_Code_SWITCH_WINDOW;
  static const Code LOCK = Request_Code_LOCK;
  static const Code UP = Request_Code_UP;
  static const Code DOWN = Request_Code_DOWN;
  static const Code LEFT = Request_Code_LEFT;
  static const Code RIGHT = Request_Code_RIGHT;
  static const Code MUTE = Request_Code_MUTE;
  static const Code SAY = Request_Code_SAY;
  static const Code GET_FILE_LIST = Request_Code_GET_FILE_LIST;
  static const Code OPEN_FILE = Request_Code_OPEN_FILE;
  static const Code MEDIA_PLAY_PAUSE = Request_Code_MEDIA_PLAY_PAUSE;
  static const Code MEDIA_STOP = Request_Code_MEDIA_STOP;
  static const Code MEDIA_PREVIOUS = Request_Code_MEDIA_PREVIOUS;
  static const Code MEDIA_NEXT = Request_Code_MEDIA_NEXT;
  static const Code MEDIA_FF = Request_Code_MEDIA_FF;
  static const Code MEDIA_REWIND = Request_Code_MEDIA_REWIND;
  static const Code KB_CTRL = Request_Code_KB_CTRL;
  static const Code KB_SHIFT = Request_Code_KB_SHIFT;
  static const Code KB_ALT = Request_Code_KB_ALT;
  static const Code KB_ALTGR = Request_Code_KB_ALTGR;
  static const Code KB_WINDOWS = Request_Code_KB_WINDOWS;
  static const Code KB_RETURN = Request_Code_KB_RETURN;
  static const Code KB_SPACE = Request_Code_KB_SPACE;
  static const Code KB_BACKSPACE = Request_Code_KB_BACKSPACE;
  static const Code KB_ESCAPE = Request_Code_KB_ESCAPE;
  static const Code KB_TAB = Request_Code_KB_TAB;
  static const Code KB_F4 = Request_Code_KB_F4;
  static const Code GOM_PLAYER_RUN = Request_Code_GOM_PLAYER_RUN;
  static const Code GOM_PLAYER_KILL = Request_Code_GOM_PLAYER_KILL;
  static const Code GOM_PLAYER_STRETCH = Request_Code_GOM_PLAYER_STRETCH;
  static inline bool Code_IsValid(int value) {
    return Request_Code_IsValid(value);
  }
  static const Code Code_MIN =
    Request_Code_Code_MIN;
  static const Code Code_MAX =
    Request_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    Request_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return Request_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return Request_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return Request_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .network_io.Request.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::network_io::Request_Type type() const;
  inline void set_type(::network_io::Request_Type value);

  // required .network_io.Request.Code code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::network_io::Request_Code code() const;
  inline void set_code(::network_io::Request_Code value);

  // required .network_io.Request.Code extraCode = 3;
  inline bool has_extracode() const;
  inline void clear_extracode();
  static const int kExtraCodeFieldNumber = 3;
  inline ::network_io::Request_Code extracode() const;
  inline void set_extracode(::network_io::Request_Code value);

  // optional string securityToken = 4;
  inline bool has_securitytoken() const;
  inline void clear_securitytoken();
  static const int kSecurityTokenFieldNumber = 4;
  inline const ::std::string& securitytoken() const;
  inline void set_securitytoken(const ::std::string& value);
  inline void set_securitytoken(const char* value);
  inline void set_securitytoken(const char* value, size_t size);
  inline ::std::string* mutable_securitytoken();
  inline ::std::string* release_securitytoken();
  inline void set_allocated_securitytoken(::std::string* securitytoken);

  // optional int32 intParam = 5;
  inline bool has_intparam() const;
  inline void clear_intparam();
  static const int kIntParamFieldNumber = 5;
  inline ::google::protobuf::int32 intparam() const;
  inline void set_intparam(::google::protobuf::int32 value);

  // optional string stringParam = 6;
  inline bool has_stringparam() const;
  inline void clear_stringparam();
  static const int kStringParamFieldNumber = 6;
  inline const ::std::string& stringparam() const;
  inline void set_stringparam(const ::std::string& value);
  inline void set_stringparam(const char* value);
  inline void set_stringparam(const char* value, size_t size);
  inline ::std::string* mutable_stringparam();
  inline ::std::string* release_stringparam();
  inline void set_allocated_stringparam(::std::string* stringparam);

  // @@protoc_insertion_point(class_scope:network_io.Request)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_extracode();
  inline void clear_has_extracode();
  inline void set_has_securitytoken();
  inline void clear_has_securitytoken();
  inline void set_has_intparam();
  inline void clear_has_intparam();
  inline void set_has_stringparam();
  inline void clear_has_stringparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int code_;
  ::std::string* securitytoken_;
  int extracode_;
  ::google::protobuf::int32 intparam_;
  ::std::string* stringparam_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_server_5fexchange_2eproto();
  friend void protobuf_AssignDesc_server_5fexchange_2eproto();
  friend void protobuf_ShutdownFile_server_5fexchange_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class DirContent_File : public ::google::protobuf::Message {
 public:
  DirContent_File();
  virtual ~DirContent_File();

  DirContent_File(const DirContent_File& from);

  inline DirContent_File& operator=(const DirContent_File& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DirContent_File& default_instance();

  void Swap(DirContent_File* other);

  // implements Message ----------------------------------------------

  DirContent_File* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DirContent_File& from);
  void MergeFrom(const DirContent_File& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DirContent_File_FileType FileType;
  static const FileType DIRECTORY = DirContent_File_FileType_DIRECTORY;
  static const FileType FILE = DirContent_File_FileType_FILE;
  static inline bool FileType_IsValid(int value) {
    return DirContent_File_FileType_IsValid(value);
  }
  static const FileType FileType_MIN =
    DirContent_File_FileType_FileType_MIN;
  static const FileType FileType_MAX =
    DirContent_File_FileType_FileType_MAX;
  static const int FileType_ARRAYSIZE =
    DirContent_File_FileType_FileType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FileType_descriptor() {
    return DirContent_File_FileType_descriptor();
  }
  static inline const ::std::string& FileType_Name(FileType value) {
    return DirContent_File_FileType_Name(value);
  }
  static inline bool FileType_Parse(const ::std::string& name,
      FileType* value) {
    return DirContent_File_FileType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .network_io.DirContent.File.FileType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::network_io::DirContent_File_FileType type() const;
  inline void set_type(::network_io::DirContent_File_FileType value);

  // required int32 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:network_io.DirContent.File)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int type_;
  ::google::protobuf::int32 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_server_5fexchange_2eproto();
  friend void protobuf_AssignDesc_server_5fexchange_2eproto();
  friend void protobuf_ShutdownFile_server_5fexchange_2eproto();

  void InitAsDefaultInstance();
  static DirContent_File* default_instance_;
};
// -------------------------------------------------------------------

class DirContent : public ::google::protobuf::Message {
 public:
  DirContent();
  virtual ~DirContent();

  DirContent(const DirContent& from);

  inline DirContent& operator=(const DirContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DirContent& default_instance();

  void Swap(DirContent* other);

  // implements Message ----------------------------------------------

  DirContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DirContent& from);
  void MergeFrom(const DirContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DirContent_File File;

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // repeated .network_io.DirContent.File file = 2;
  inline int file_size() const;
  inline void clear_file();
  static const int kFileFieldNumber = 2;
  inline const ::network_io::DirContent_File& file(int index) const;
  inline ::network_io::DirContent_File* mutable_file(int index);
  inline ::network_io::DirContent_File* add_file();
  inline const ::google::protobuf::RepeatedPtrField< ::network_io::DirContent_File >&
      file() const;
  inline ::google::protobuf::RepeatedPtrField< ::network_io::DirContent_File >*
      mutable_file();

  // @@protoc_insertion_point(class_scope:network_io.DirContent)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;
  ::google::protobuf::RepeatedPtrField< ::network_io::DirContent_File > file_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_server_5fexchange_2eproto();
  friend void protobuf_AssignDesc_server_5fexchange_2eproto();
  friend void protobuf_ShutdownFile_server_5fexchange_2eproto();

  void InitAsDefaultInstance();
  static DirContent* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Response_ReturnCode ReturnCode;
  static const ReturnCode RC_SUCCESS = Response_ReturnCode_RC_SUCCESS;
  static const ReturnCode RC_ERROR = Response_ReturnCode_RC_ERROR;
  static inline bool ReturnCode_IsValid(int value) {
    return Response_ReturnCode_IsValid(value);
  }
  static const ReturnCode ReturnCode_MIN =
    Response_ReturnCode_ReturnCode_MIN;
  static const ReturnCode ReturnCode_MAX =
    Response_ReturnCode_ReturnCode_MAX;
  static const int ReturnCode_ARRAYSIZE =
    Response_ReturnCode_ReturnCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReturnCode_descriptor() {
    return Response_ReturnCode_descriptor();
  }
  static inline const ::std::string& ReturnCode_Name(ReturnCode value) {
    return Response_ReturnCode_Name(value);
  }
  static inline bool ReturnCode_Parse(const ::std::string& name,
      ReturnCode* value) {
    return Response_ReturnCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .network_io.Request.Type requestType = 1;
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::network_io::Request_Type requesttype() const;
  inline void set_requesttype(::network_io::Request_Type value);

  // optional .network_io.Request.Code requestCode = 2;
  inline bool has_requestcode() const;
  inline void clear_requestcode();
  static const int kRequestCodeFieldNumber = 2;
  inline ::network_io::Request_Code requestcode() const;
  inline void set_requestcode(::network_io::Request_Code value);

  // optional .network_io.Response.ReturnCode returnCode = 3 [default = RC_ERROR];
  inline bool has_returncode() const;
  inline void clear_returncode();
  static const int kReturnCodeFieldNumber = 3;
  inline ::network_io::Response_ReturnCode returncode() const;
  inline void set_returncode(::network_io::Response_ReturnCode value);

  // optional string message = 4;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 4;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional int32 intValue = 5;
  inline bool has_intvalue() const;
  inline void clear_intvalue();
  static const int kIntValueFieldNumber = 5;
  inline ::google::protobuf::int32 intvalue() const;
  inline void set_intvalue(::google::protobuf::int32 value);

  // optional .network_io.DirContent dirContent = 6;
  inline bool has_dircontent() const;
  inline void clear_dircontent();
  static const int kDirContentFieldNumber = 6;
  inline const ::network_io::DirContent& dircontent() const;
  inline ::network_io::DirContent* mutable_dircontent();
  inline ::network_io::DirContent* release_dircontent();
  inline void set_allocated_dircontent(::network_io::DirContent* dircontent);

  // @@protoc_insertion_point(class_scope:network_io.Response)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_requestcode();
  inline void clear_has_requestcode();
  inline void set_has_returncode();
  inline void clear_has_returncode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_intvalue();
  inline void clear_has_intvalue();
  inline void set_has_dircontent();
  inline void clear_has_dircontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int requesttype_;
  int requestcode_;
  ::std::string* message_;
  int returncode_;
  ::google::protobuf::int32 intvalue_;
  ::network_io::DirContent* dircontent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_server_5fexchange_2eproto();
  friend void protobuf_AssignDesc_server_5fexchange_2eproto();
  friend void protobuf_ShutdownFile_server_5fexchange_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// required .network_io.Request.Type type = 1;
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::network_io::Request_Type Request::type() const {
  return static_cast< ::network_io::Request_Type >(type_);
}
inline void Request::set_type(::network_io::Request_Type value) {
  assert(::network_io::Request_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .network_io.Request.Code code = 2;
inline bool Request::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::network_io::Request_Code Request::code() const {
  return static_cast< ::network_io::Request_Code >(code_);
}
inline void Request::set_code(::network_io::Request_Code value) {
  assert(::network_io::Request_Code_IsValid(value));
  set_has_code();
  code_ = value;
}

// required .network_io.Request.Code extraCode = 3;
inline bool Request::has_extracode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_extracode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_extracode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_extracode() {
  extracode_ = 0;
  clear_has_extracode();
}
inline ::network_io::Request_Code Request::extracode() const {
  return static_cast< ::network_io::Request_Code >(extracode_);
}
inline void Request::set_extracode(::network_io::Request_Code value) {
  assert(::network_io::Request_Code_IsValid(value));
  set_has_extracode();
  extracode_ = value;
}

// optional string securityToken = 4;
inline bool Request::has_securitytoken() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_securitytoken() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_securitytoken() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_securitytoken() {
  if (securitytoken_ != &::google::protobuf::internal::kEmptyString) {
    securitytoken_->clear();
  }
  clear_has_securitytoken();
}
inline const ::std::string& Request::securitytoken() const {
  return *securitytoken_;
}
inline void Request::set_securitytoken(const ::std::string& value) {
  set_has_securitytoken();
  if (securitytoken_ == &::google::protobuf::internal::kEmptyString) {
    securitytoken_ = new ::std::string;
  }
  securitytoken_->assign(value);
}
inline void Request::set_securitytoken(const char* value) {
  set_has_securitytoken();
  if (securitytoken_ == &::google::protobuf::internal::kEmptyString) {
    securitytoken_ = new ::std::string;
  }
  securitytoken_->assign(value);
}
inline void Request::set_securitytoken(const char* value, size_t size) {
  set_has_securitytoken();
  if (securitytoken_ == &::google::protobuf::internal::kEmptyString) {
    securitytoken_ = new ::std::string;
  }
  securitytoken_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_securitytoken() {
  set_has_securitytoken();
  if (securitytoken_ == &::google::protobuf::internal::kEmptyString) {
    securitytoken_ = new ::std::string;
  }
  return securitytoken_;
}
inline ::std::string* Request::release_securitytoken() {
  clear_has_securitytoken();
  if (securitytoken_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = securitytoken_;
    securitytoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_securitytoken(::std::string* securitytoken) {
  if (securitytoken_ != &::google::protobuf::internal::kEmptyString) {
    delete securitytoken_;
  }
  if (securitytoken) {
    set_has_securitytoken();
    securitytoken_ = securitytoken;
  } else {
    clear_has_securitytoken();
    securitytoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 intParam = 5;
inline bool Request::has_intparam() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_intparam() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_intparam() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_intparam() {
  intparam_ = 0;
  clear_has_intparam();
}
inline ::google::protobuf::int32 Request::intparam() const {
  return intparam_;
}
inline void Request::set_intparam(::google::protobuf::int32 value) {
  set_has_intparam();
  intparam_ = value;
}

// optional string stringParam = 6;
inline bool Request::has_stringparam() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Request::set_has_stringparam() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Request::clear_has_stringparam() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Request::clear_stringparam() {
  if (stringparam_ != &::google::protobuf::internal::kEmptyString) {
    stringparam_->clear();
  }
  clear_has_stringparam();
}
inline const ::std::string& Request::stringparam() const {
  return *stringparam_;
}
inline void Request::set_stringparam(const ::std::string& value) {
  set_has_stringparam();
  if (stringparam_ == &::google::protobuf::internal::kEmptyString) {
    stringparam_ = new ::std::string;
  }
  stringparam_->assign(value);
}
inline void Request::set_stringparam(const char* value) {
  set_has_stringparam();
  if (stringparam_ == &::google::protobuf::internal::kEmptyString) {
    stringparam_ = new ::std::string;
  }
  stringparam_->assign(value);
}
inline void Request::set_stringparam(const char* value, size_t size) {
  set_has_stringparam();
  if (stringparam_ == &::google::protobuf::internal::kEmptyString) {
    stringparam_ = new ::std::string;
  }
  stringparam_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_stringparam() {
  set_has_stringparam();
  if (stringparam_ == &::google::protobuf::internal::kEmptyString) {
    stringparam_ = new ::std::string;
  }
  return stringparam_;
}
inline ::std::string* Request::release_stringparam() {
  clear_has_stringparam();
  if (stringparam_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stringparam_;
    stringparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_stringparam(::std::string* stringparam) {
  if (stringparam_ != &::google::protobuf::internal::kEmptyString) {
    delete stringparam_;
  }
  if (stringparam) {
    set_has_stringparam();
    stringparam_ = stringparam;
  } else {
    clear_has_stringparam();
    stringparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DirContent_File

// required string name = 1;
inline bool DirContent_File::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DirContent_File::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DirContent_File::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DirContent_File::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DirContent_File::name() const {
  return *name_;
}
inline void DirContent_File::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DirContent_File::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DirContent_File::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DirContent_File::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DirContent_File::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DirContent_File::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .network_io.DirContent.File.FileType type = 3;
inline bool DirContent_File::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DirContent_File::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DirContent_File::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DirContent_File::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::network_io::DirContent_File_FileType DirContent_File::type() const {
  return static_cast< ::network_io::DirContent_File_FileType >(type_);
}
inline void DirContent_File::set_type(::network_io::DirContent_File_FileType value) {
  assert(::network_io::DirContent_File_FileType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 size = 4;
inline bool DirContent_File::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DirContent_File::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DirContent_File::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DirContent_File::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 DirContent_File::size() const {
  return size_;
}
inline void DirContent_File::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// -------------------------------------------------------------------

// DirContent

// required string path = 1;
inline bool DirContent::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DirContent::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DirContent::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DirContent::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& DirContent::path() const {
  return *path_;
}
inline void DirContent::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void DirContent::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void DirContent::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DirContent::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* DirContent::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DirContent::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .network_io.DirContent.File file = 2;
inline int DirContent::file_size() const {
  return file_.size();
}
inline void DirContent::clear_file() {
  file_.Clear();
}
inline const ::network_io::DirContent_File& DirContent::file(int index) const {
  return file_.Get(index);
}
inline ::network_io::DirContent_File* DirContent::mutable_file(int index) {
  return file_.Mutable(index);
}
inline ::network_io::DirContent_File* DirContent::add_file() {
  return file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::network_io::DirContent_File >&
DirContent::file() const {
  return file_;
}
inline ::google::protobuf::RepeatedPtrField< ::network_io::DirContent_File >*
DirContent::mutable_file() {
  return &file_;
}

// -------------------------------------------------------------------

// Response

// optional .network_io.Request.Type requestType = 1;
inline bool Response::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_requesttype() {
  requesttype_ = 0;
  clear_has_requesttype();
}
inline ::network_io::Request_Type Response::requesttype() const {
  return static_cast< ::network_io::Request_Type >(requesttype_);
}
inline void Response::set_requesttype(::network_io::Request_Type value) {
  assert(::network_io::Request_Type_IsValid(value));
  set_has_requesttype();
  requesttype_ = value;
}

// optional .network_io.Request.Code requestCode = 2;
inline bool Response::has_requestcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_requestcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_requestcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_requestcode() {
  requestcode_ = 0;
  clear_has_requestcode();
}
inline ::network_io::Request_Code Response::requestcode() const {
  return static_cast< ::network_io::Request_Code >(requestcode_);
}
inline void Response::set_requestcode(::network_io::Request_Code value) {
  assert(::network_io::Request_Code_IsValid(value));
  set_has_requestcode();
  requestcode_ = value;
}

// optional .network_io.Response.ReturnCode returnCode = 3 [default = RC_ERROR];
inline bool Response::has_returncode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_returncode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_returncode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_returncode() {
  returncode_ = 1;
  clear_has_returncode();
}
inline ::network_io::Response_ReturnCode Response::returncode() const {
  return static_cast< ::network_io::Response_ReturnCode >(returncode_);
}
inline void Response::set_returncode(::network_io::Response_ReturnCode value) {
  assert(::network_io::Response_ReturnCode_IsValid(value));
  set_has_returncode();
  returncode_ = value;
}

// optional string message = 4;
inline bool Response::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Response::message() const {
  return *message_;
}
inline void Response::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Response::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Response::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* Response::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 intValue = 5;
inline bool Response::has_intvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response::set_has_intvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Response::clear_has_intvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Response::clear_intvalue() {
  intvalue_ = 0;
  clear_has_intvalue();
}
inline ::google::protobuf::int32 Response::intvalue() const {
  return intvalue_;
}
inline void Response::set_intvalue(::google::protobuf::int32 value) {
  set_has_intvalue();
  intvalue_ = value;
}

// optional .network_io.DirContent dirContent = 6;
inline bool Response::has_dircontent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Response::set_has_dircontent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Response::clear_has_dircontent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Response::clear_dircontent() {
  if (dircontent_ != NULL) dircontent_->::network_io::DirContent::Clear();
  clear_has_dircontent();
}
inline const ::network_io::DirContent& Response::dircontent() const {
  return dircontent_ != NULL ? *dircontent_ : *default_instance_->dircontent_;
}
inline ::network_io::DirContent* Response::mutable_dircontent() {
  set_has_dircontent();
  if (dircontent_ == NULL) dircontent_ = new ::network_io::DirContent;
  return dircontent_;
}
inline ::network_io::DirContent* Response::release_dircontent() {
  clear_has_dircontent();
  ::network_io::DirContent* temp = dircontent_;
  dircontent_ = NULL;
  return temp;
}
inline void Response::set_allocated_dircontent(::network_io::DirContent* dircontent) {
  delete dircontent_;
  dircontent_ = dircontent;
  if (dircontent) {
    set_has_dircontent();
  } else {
    clear_has_dircontent();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace network_io

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network_io::Request_Type>() {
  return ::network_io::Request_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network_io::Request_Code>() {
  return ::network_io::Request_Code_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network_io::DirContent_File_FileType>() {
  return ::network_io::DirContent_File_FileType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network_io::Response_ReturnCode>() {
  return ::network_io::Response_ReturnCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_5fexchange_2eproto__INCLUDED
