// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace network_io {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class Request;
class FileInfo;
class Response;

enum Request_Type {
  Request_Type_SIMPLE = 0,
  Request_Type_EXPLORER = 1,
  Request_Type_KEYBOARD = 2,
  Request_Type_AI = 3,
  Request_Type_VOLUME = 4,
  Request_Type_APP = 5
};
bool Request_Type_IsValid(int value);
const Request_Type Request_Type_Type_MIN = Request_Type_SIMPLE;
const Request_Type Request_Type_Type_MAX = Request_Type_APP;
const int Request_Type_Type_ARRAYSIZE = Request_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Type_descriptor();
inline const ::std::string& Request_Type_Name(Request_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Type_descriptor(), value);
}
inline bool Request_Type_Parse(
    const ::std::string& name, Request_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Type>(
    Request_Type_descriptor(), name, value);
}
enum Request_Code {
  Request_Code_NONE = 0,
  Request_Code_DEFINE = 1,
  Request_Code_STATUS = 2,
  Request_Code_ON = 3,
  Request_Code_OFF = 4,
  Request_Code_PING = 5,
  Request_Code_TEST = 6,
  Request_Code_KILL_SERVER = 7,
  Request_Code_SHUTDOWN = 8,
  Request_Code_SWITCH_WINDOW = 9,
  Request_Code_LOCK = 10,
  Request_Code_MUTE = 11,
  Request_Code_SAY = 12,
  Request_Code_DPAD_UP = 13,
  Request_Code_DPAD_DOWN = 14,
  Request_Code_DPAD_LEFT = 15,
  Request_Code_DPAD_RIGHT = 16,
  Request_Code_MEDIA_PLAY_PAUSE = 20,
  Request_Code_MEDIA_STOP = 21,
  Request_Code_MEDIA_PREVIOUS = 22,
  Request_Code_MEDIA_NEXT = 23,
  Request_Code_MEDIA_FF = 24,
  Request_Code_MEDIA_REWIND = 25,
  Request_Code_QUERY_ROOTS = 26,
  Request_Code_QUERY_CHILDREN = 27,
  Request_Code_OPEN_SERVER_SIDE = 28,
  Request_Code_OPEN_CLIENT_SIDE = 29,
  Request_Code_KEYCODE_CTRL = 30,
  Request_Code_KEYCODE_SHIFT = 31,
  Request_Code_KEYCODE_ALT_LEFT = 32,
  Request_Code_KEYCODE_ALT_RIGHT = 33,
  Request_Code_KEYCODE_WINDOWS = 34,
  Request_Code_KEYCODE_ENTER = 40,
  Request_Code_KEYCODE_ESCAPE = 41,
  Request_Code_KEYCODE_DELETE = 42,
  Request_Code_KEYCODE_SPACE = 43,
  Request_Code_KEYCODE_BACKSPACE = 44,
  Request_Code_KEYCODE_TAB = 45,
  Request_Code_KEYCODE_0 = 50,
  Request_Code_KEYCODE_1 = 51,
  Request_Code_KEYCODE_2 = 52,
  Request_Code_KEYCODE_3 = 53,
  Request_Code_KEYCODE_4 = 54,
  Request_Code_KEYCODE_5 = 55,
  Request_Code_KEYCODE_6 = 56,
  Request_Code_KEYCODE_7 = 57,
  Request_Code_KEYCODE_8 = 58,
  Request_Code_KEYCODE_9 = 59,
  Request_Code_KEYCODE_A = 60,
  Request_Code_KEYCODE_B = 61,
  Request_Code_KEYCODE_C = 62,
  Request_Code_KEYCODE_D = 63,
  Request_Code_KEYCODE_E = 64,
  Request_Code_KEYCODE_F = 65,
  Request_Code_KEYCODE_G = 66,
  Request_Code_KEYCODE_H = 67,
  Request_Code_KEYCODE_I = 68,
  Request_Code_KEYCODE_J = 69,
  Request_Code_KEYCODE_K = 70,
  Request_Code_KEYCODE_L = 71,
  Request_Code_KEYCODE_M = 72,
  Request_Code_KEYCODE_N = 73,
  Request_Code_KEYCODE_O = 74,
  Request_Code_KEYCODE_P = 75,
  Request_Code_KEYCODE_Q = 76,
  Request_Code_KEYCODE_R = 77,
  Request_Code_KEYCODE_S = 78,
  Request_Code_KEYCODE_T = 79,
  Request_Code_KEYCODE_U = 80,
  Request_Code_KEYCODE_V = 81,
  Request_Code_KEYCODE_W = 82,
  Request_Code_KEYCODE_X = 83,
  Request_Code_KEYCODE_Y = 84,
  Request_Code_KEYCODE_Z = 85,
  Request_Code_KEYCODE_F1 = 86,
  Request_Code_KEYCODE_F2 = 87,
  Request_Code_KEYCODE_F3 = 88,
  Request_Code_KEYCODE_F4 = 89,
  Request_Code_KEYCODE_F5 = 90,
  Request_Code_KEYCODE_F6 = 91,
  Request_Code_KEYCODE_F7 = 92,
  Request_Code_KEYCODE_F8 = 93,
  Request_Code_KEYCODE_F9 = 94,
  Request_Code_KEYCODE_F10 = 95,
  Request_Code_KEYCODE_F11 = 96,
  Request_Code_KEYCODE_F12 = 97,
  Request_Code_KEYCODE_EQUALS = 100,
  Request_Code_KEYCODE_MINUS = 101,
  Request_Code_KEYCODE_PLUS = 102,
  Request_Code_KEYCODE_STAR = 103,
  Request_Code_KEYCODE_SLASH = 104,
  Request_Code_KEYCODE_BACKSLASH = 105,
  Request_Code_KEYCODE_UNDERSCORE = 106,
  Request_Code_KEYCODE_PIPE = 107,
  Request_Code_KEYCODE_COMMA = 108,
  Request_Code_KEYCODE_PERIODE = 109,
  Request_Code_KEYCODE_COLON = 110,
  Request_Code_KEYCODE_SEMICOLON = 111,
  Request_Code_KEYCODE_AT = 112,
  Request_Code_KEYCODE_APOSTROPHE = 113,
  Request_Code_KEYCODE_LEFT_PAREN = 120,
  Request_Code_KEYCODE_RIGHT_PARENT = 121,
  Request_Code_KEYCODE_LEFT_BRACKET = 122,
  Request_Code_KEYCODE_RIGHT_BRACKET = 123,
  Request_Code_KEYCODE_LEFT_CURLY_BRACKET = 124,
  Request_Code_KEYCODE_RIGHT_CURLY_BRACKET = 125,
  Request_Code_KEYCODE_LEFT_ANGLE_BRACKET = 126,
  Request_Code_KEYCODE_RIGHT_ANGLE_BRACKET = 127
};
bool Request_Code_IsValid(int value);
const Request_Code Request_Code_Code_MIN = Request_Code_NONE;
const Request_Code Request_Code_Code_MAX = Request_Code_KEYCODE_RIGHT_ANGLE_BRACKET;
const int Request_Code_Code_ARRAYSIZE = Request_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Code_descriptor();
inline const ::std::string& Request_Code_Name(Request_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Code_descriptor(), value);
}
inline bool Request_Code_Parse(
    const ::std::string& name, Request_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Code>(
    Request_Code_descriptor(), name, value);
}
enum Response_ReturnCode {
  Response_ReturnCode_RC_SUCCESS = 0,
  Response_ReturnCode_RC_ERROR = 1
};
bool Response_ReturnCode_IsValid(int value);
const Response_ReturnCode Response_ReturnCode_ReturnCode_MIN = Response_ReturnCode_RC_SUCCESS;
const Response_ReturnCode Response_ReturnCode_ReturnCode_MAX = Response_ReturnCode_RC_ERROR;
const int Response_ReturnCode_ReturnCode_ARRAYSIZE = Response_ReturnCode_ReturnCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_ReturnCode_descriptor();
inline const ::std::string& Response_ReturnCode_Name(Response_ReturnCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_ReturnCode_descriptor(), value);
}
inline bool Response_ReturnCode_Parse(
    const ::std::string& name, Response_ReturnCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_ReturnCode>(
    Response_ReturnCode_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_Type Type;
  static const Type SIMPLE = Request_Type_SIMPLE;
  static const Type EXPLORER = Request_Type_EXPLORER;
  static const Type KEYBOARD = Request_Type_KEYBOARD;
  static const Type AI = Request_Type_AI;
  static const Type VOLUME = Request_Type_VOLUME;
  static const Type APP = Request_Type_APP;
  static inline bool Type_IsValid(int value) {
    return Request_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Request_Type_Type_MIN;
  static const Type Type_MAX =
    Request_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Request_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Request_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Request_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Request_Type_Parse(name, value);
  }

  typedef Request_Code Code;
  static const Code NONE = Request_Code_NONE;
  static const Code DEFINE = Request_Code_DEFINE;
  static const Code STATUS = Request_Code_STATUS;
  static const Code ON = Request_Code_ON;
  static const Code OFF = Request_Code_OFF;
  static const Code PING = Request_Code_PING;
  static const Code TEST = Request_Code_TEST;
  static const Code KILL_SERVER = Request_Code_KILL_SERVER;
  static const Code SHUTDOWN = Request_Code_SHUTDOWN;
  static const Code SWITCH_WINDOW = Request_Code_SWITCH_WINDOW;
  static const Code LOCK = Request_Code_LOCK;
  static const Code MUTE = Request_Code_MUTE;
  static const Code SAY = Request_Code_SAY;
  static const Code DPAD_UP = Request_Code_DPAD_UP;
  static const Code DPAD_DOWN = Request_Code_DPAD_DOWN;
  static const Code DPAD_LEFT = Request_Code_DPAD_LEFT;
  static const Code DPAD_RIGHT = Request_Code_DPAD_RIGHT;
  static const Code MEDIA_PLAY_PAUSE = Request_Code_MEDIA_PLAY_PAUSE;
  static const Code MEDIA_STOP = Request_Code_MEDIA_STOP;
  static const Code MEDIA_PREVIOUS = Request_Code_MEDIA_PREVIOUS;
  static const Code MEDIA_NEXT = Request_Code_MEDIA_NEXT;
  static const Code MEDIA_FF = Request_Code_MEDIA_FF;
  static const Code MEDIA_REWIND = Request_Code_MEDIA_REWIND;
  static const Code QUERY_ROOTS = Request_Code_QUERY_ROOTS;
  static const Code QUERY_CHILDREN = Request_Code_QUERY_CHILDREN;
  static const Code OPEN_SERVER_SIDE = Request_Code_OPEN_SERVER_SIDE;
  static const Code OPEN_CLIENT_SIDE = Request_Code_OPEN_CLIENT_SIDE;
  static const Code KEYCODE_CTRL = Request_Code_KEYCODE_CTRL;
  static const Code KEYCODE_SHIFT = Request_Code_KEYCODE_SHIFT;
  static const Code KEYCODE_ALT_LEFT = Request_Code_KEYCODE_ALT_LEFT;
  static const Code KEYCODE_ALT_RIGHT = Request_Code_KEYCODE_ALT_RIGHT;
  static const Code KEYCODE_WINDOWS = Request_Code_KEYCODE_WINDOWS;
  static const Code KEYCODE_ENTER = Request_Code_KEYCODE_ENTER;
  static const Code KEYCODE_ESCAPE = Request_Code_KEYCODE_ESCAPE;
  static const Code KEYCODE_DELETE = Request_Code_KEYCODE_DELETE;
  static const Code KEYCODE_SPACE = Request_Code_KEYCODE_SPACE;
  static const Code KEYCODE_BACKSPACE = Request_Code_KEYCODE_BACKSPACE;
  static const Code KEYCODE_TAB = Request_Code_KEYCODE_TAB;
  static const Code KEYCODE_0 = Request_Code_KEYCODE_0;
  static const Code KEYCODE_1 = Request_Code_KEYCODE_1;
  static const Code KEYCODE_2 = Request_Code_KEYCODE_2;
  static const Code KEYCODE_3 = Request_Code_KEYCODE_3;
  static const Code KEYCODE_4 = Request_Code_KEYCODE_4;
  static const Code KEYCODE_5 = Request_Code_KEYCODE_5;
  static const Code KEYCODE_6 = Request_Code_KEYCODE_6;
  static const Code KEYCODE_7 = Request_Code_KEYCODE_7;
  static const Code KEYCODE_8 = Request_Code_KEYCODE_8;
  static const Code KEYCODE_9 = Request_Code_KEYCODE_9;
  static const Code KEYCODE_A = Request_Code_KEYCODE_A;
  static const Code KEYCODE_B = Request_Code_KEYCODE_B;
  static const Code KEYCODE_C = Request_Code_KEYCODE_C;
  static const Code KEYCODE_D = Request_Code_KEYCODE_D;
  static const Code KEYCODE_E = Request_Code_KEYCODE_E;
  static const Code KEYCODE_F = Request_Code_KEYCODE_F;
  static const Code KEYCODE_G = Request_Code_KEYCODE_G;
  static const Code KEYCODE_H = Request_Code_KEYCODE_H;
  static const Code KEYCODE_I = Request_Code_KEYCODE_I;
  static const Code KEYCODE_J = Request_Code_KEYCODE_J;
  static const Code KEYCODE_K = Request_Code_KEYCODE_K;
  static const Code KEYCODE_L = Request_Code_KEYCODE_L;
  static const Code KEYCODE_M = Request_Code_KEYCODE_M;
  static const Code KEYCODE_N = Request_Code_KEYCODE_N;
  static const Code KEYCODE_O = Request_Code_KEYCODE_O;
  static const Code KEYCODE_P = Request_Code_KEYCODE_P;
  static const Code KEYCODE_Q = Request_Code_KEYCODE_Q;
  static const Code KEYCODE_R = Request_Code_KEYCODE_R;
  static const Code KEYCODE_S = Request_Code_KEYCODE_S;
  static const Code KEYCODE_T = Request_Code_KEYCODE_T;
  static const Code KEYCODE_U = Request_Code_KEYCODE_U;
  static const Code KEYCODE_V = Request_Code_KEYCODE_V;
  static const Code KEYCODE_W = Request_Code_KEYCODE_W;
  static const Code KEYCODE_X = Request_Code_KEYCODE_X;
  static const Code KEYCODE_Y = Request_Code_KEYCODE_Y;
  static const Code KEYCODE_Z = Request_Code_KEYCODE_Z;
  static const Code KEYCODE_F1 = Request_Code_KEYCODE_F1;
  static const Code KEYCODE_F2 = Request_Code_KEYCODE_F2;
  static const Code KEYCODE_F3 = Request_Code_KEYCODE_F3;
  static const Code KEYCODE_F4 = Request_Code_KEYCODE_F4;
  static const Code KEYCODE_F5 = Request_Code_KEYCODE_F5;
  static const Code KEYCODE_F6 = Request_Code_KEYCODE_F6;
  static const Code KEYCODE_F7 = Request_Code_KEYCODE_F7;
  static const Code KEYCODE_F8 = Request_Code_KEYCODE_F8;
  static const Code KEYCODE_F9 = Request_Code_KEYCODE_F9;
  static const Code KEYCODE_F10 = Request_Code_KEYCODE_F10;
  static const Code KEYCODE_F11 = Request_Code_KEYCODE_F11;
  static const Code KEYCODE_F12 = Request_Code_KEYCODE_F12;
  static const Code KEYCODE_EQUALS = Request_Code_KEYCODE_EQUALS;
  static const Code KEYCODE_MINUS = Request_Code_KEYCODE_MINUS;
  static const Code KEYCODE_PLUS = Request_Code_KEYCODE_PLUS;
  static const Code KEYCODE_STAR = Request_Code_KEYCODE_STAR;
  static const Code KEYCODE_SLASH = Request_Code_KEYCODE_SLASH;
  static const Code KEYCODE_BACKSLASH = Request_Code_KEYCODE_BACKSLASH;
  static const Code KEYCODE_UNDERSCORE = Request_Code_KEYCODE_UNDERSCORE;
  static const Code KEYCODE_PIPE = Request_Code_KEYCODE_PIPE;
  static const Code KEYCODE_COMMA = Request_Code_KEYCODE_COMMA;
  static const Code KEYCODE_PERIODE = Request_Code_KEYCODE_PERIODE;
  static const Code KEYCODE_COLON = Request_Code_KEYCODE_COLON;
  static const Code KEYCODE_SEMICOLON = Request_Code_KEYCODE_SEMICOLON;
  static const Code KEYCODE_AT = Request_Code_KEYCODE_AT;
  static const Code KEYCODE_APOSTROPHE = Request_Code_KEYCODE_APOSTROPHE;
  static const Code KEYCODE_LEFT_PAREN = Request_Code_KEYCODE_LEFT_PAREN;
  static const Code KEYCODE_RIGHT_PARENT = Request_Code_KEYCODE_RIGHT_PARENT;
  static const Code KEYCODE_LEFT_BRACKET = Request_Code_KEYCODE_LEFT_BRACKET;
  static const Code KEYCODE_RIGHT_BRACKET = Request_Code_KEYCODE_RIGHT_BRACKET;
  static const Code KEYCODE_LEFT_CURLY_BRACKET = Request_Code_KEYCODE_LEFT_CURLY_BRACKET;
  static const Code KEYCODE_RIGHT_CURLY_BRACKET = Request_Code_KEYCODE_RIGHT_CURLY_BRACKET;
  static const Code KEYCODE_LEFT_ANGLE_BRACKET = Request_Code_KEYCODE_LEFT_ANGLE_BRACKET;
  static const Code KEYCODE_RIGHT_ANGLE_BRACKET = Request_Code_KEYCODE_RIGHT_ANGLE_BRACKET;
  static inline bool Code_IsValid(int value) {
    return Request_Code_IsValid(value);
  }
  static const Code Code_MIN =
    Request_Code_Code_MIN;
  static const Code Code_MAX =
    Request_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    Request_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return Request_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return Request_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return Request_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .network_io.Request.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::network_io::Request_Type type() const;
  inline void set_type(::network_io::Request_Type value);

  // required .network_io.Request.Code code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::network_io::Request_Code code() const;
  inline void set_code(::network_io::Request_Code value);

  // required .network_io.Request.Code extraCode = 3;
  inline bool has_extracode() const;
  inline void clear_extracode();
  static const int kExtraCodeFieldNumber = 3;
  inline ::network_io::Request_Code extracode() const;
  inline void set_extracode(::network_io::Request_Code value);

  // optional string securityToken = 4;
  inline bool has_securitytoken() const;
  inline void clear_securitytoken();
  static const int kSecurityTokenFieldNumber = 4;
  inline const ::std::string& securitytoken() const;
  inline void set_securitytoken(const ::std::string& value);
  inline void set_securitytoken(const char* value);
  inline void set_securitytoken(const char* value, size_t size);
  inline ::std::string* mutable_securitytoken();
  inline ::std::string* release_securitytoken();
  inline void set_allocated_securitytoken(::std::string* securitytoken);

  // optional int32 intExtra = 5;
  inline bool has_intextra() const;
  inline void clear_intextra();
  static const int kIntExtraFieldNumber = 5;
  inline ::google::protobuf::int32 intextra() const;
  inline void set_intextra(::google::protobuf::int32 value);

  // optional string stringExtra = 6;
  inline bool has_stringextra() const;
  inline void clear_stringextra();
  static const int kStringExtraFieldNumber = 6;
  inline const ::std::string& stringextra() const;
  inline void set_stringextra(const ::std::string& value);
  inline void set_stringextra(const char* value);
  inline void set_stringextra(const char* value, size_t size);
  inline ::std::string* mutable_stringextra();
  inline ::std::string* release_stringextra();
  inline void set_allocated_stringextra(::std::string* stringextra);

  // @@protoc_insertion_point(class_scope:network_io.Request)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_extracode();
  inline void clear_has_extracode();
  inline void set_has_securitytoken();
  inline void clear_has_securitytoken();
  inline void set_has_intextra();
  inline void clear_has_intextra();
  inline void set_has_stringextra();
  inline void clear_has_stringextra();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  int code_;
  ::std::string* securitytoken_;
  int extracode_;
  ::google::protobuf::int32 intextra_;
  ::std::string* stringextra_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class FileInfo : public ::google::protobuf::Message {
 public:
  FileInfo();
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileInfo& default_instance();

  void Swap(FileInfo* other);

  // implements Message ----------------------------------------------

  FileInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string absoluteFilePath = 1;
  inline bool has_absolutefilepath() const;
  inline void clear_absolutefilepath();
  static const int kAbsoluteFilePathFieldNumber = 1;
  inline const ::std::string& absolutefilepath() const;
  inline void set_absolutefilepath(const ::std::string& value);
  inline void set_absolutefilepath(const char* value);
  inline void set_absolutefilepath(const char* value, size_t size);
  inline ::std::string* mutable_absolutefilepath();
  inline ::std::string* release_absolutefilepath();
  inline void set_allocated_absolutefilepath(::std::string* absolutefilepath);

  // required string filename = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required bool isDirectory = 3;
  inline bool has_isdirectory() const;
  inline void clear_isdirectory();
  static const int kIsDirectoryFieldNumber = 3;
  inline bool isdirectory() const;
  inline void set_isdirectory(bool value);

  // required int32 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // repeated .network_io.FileInfo child = 5;
  inline int child_size() const;
  inline void clear_child();
  static const int kChildFieldNumber = 5;
  inline const ::network_io::FileInfo& child(int index) const;
  inline ::network_io::FileInfo* mutable_child(int index);
  inline ::network_io::FileInfo* add_child();
  inline const ::google::protobuf::RepeatedPtrField< ::network_io::FileInfo >&
      child() const;
  inline ::google::protobuf::RepeatedPtrField< ::network_io::FileInfo >*
      mutable_child();

  // @@protoc_insertion_point(class_scope:network_io.FileInfo)
 private:
  inline void set_has_absolutefilepath();
  inline void clear_has_absolutefilepath();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_isdirectory();
  inline void clear_has_isdirectory();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* absolutefilepath_;
  ::std::string* filename_;
  bool isdirectory_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::RepeatedPtrField< ::network_io::FileInfo > child_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static FileInfo* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Response_ReturnCode ReturnCode;
  static const ReturnCode RC_SUCCESS = Response_ReturnCode_RC_SUCCESS;
  static const ReturnCode RC_ERROR = Response_ReturnCode_RC_ERROR;
  static inline bool ReturnCode_IsValid(int value) {
    return Response_ReturnCode_IsValid(value);
  }
  static const ReturnCode ReturnCode_MIN =
    Response_ReturnCode_ReturnCode_MIN;
  static const ReturnCode ReturnCode_MAX =
    Response_ReturnCode_ReturnCode_MAX;
  static const int ReturnCode_ARRAYSIZE =
    Response_ReturnCode_ReturnCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReturnCode_descriptor() {
    return Response_ReturnCode_descriptor();
  }
  static inline const ::std::string& ReturnCode_Name(ReturnCode value) {
    return Response_ReturnCode_Name(value);
  }
  static inline bool ReturnCode_Parse(const ::std::string& name,
      ReturnCode* value) {
    return Response_ReturnCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .network_io.Request.Type requestType = 1;
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::network_io::Request_Type requesttype() const;
  inline void set_requesttype(::network_io::Request_Type value);

  // required .network_io.Request.Code requestCode = 2;
  inline bool has_requestcode() const;
  inline void clear_requestcode();
  static const int kRequestCodeFieldNumber = 2;
  inline ::network_io::Request_Code requestcode() const;
  inline void set_requestcode(::network_io::Request_Code value);

  // required .network_io.Response.ReturnCode returnCode = 3 [default = RC_ERROR];
  inline bool has_returncode() const;
  inline void clear_returncode();
  static const int kReturnCodeFieldNumber = 3;
  inline ::network_io::Response_ReturnCode returncode() const;
  inline void set_returncode(::network_io::Response_ReturnCode value);

  // required string message = 4;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 4;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional int32 intValue = 5;
  inline bool has_intvalue() const;
  inline void clear_intvalue();
  static const int kIntValueFieldNumber = 5;
  inline ::google::protobuf::int32 intvalue() const;
  inline void set_intvalue(::google::protobuf::int32 value);

  // optional .network_io.FileInfo file = 6;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 6;
  inline const ::network_io::FileInfo& file() const;
  inline ::network_io::FileInfo* mutable_file();
  inline ::network_io::FileInfo* release_file();
  inline void set_allocated_file(::network_io::FileInfo* file);

  // @@protoc_insertion_point(class_scope:network_io.Response)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_requestcode();
  inline void clear_has_requestcode();
  inline void set_has_returncode();
  inline void clear_has_returncode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_intvalue();
  inline void clear_has_intvalue();
  inline void set_has_file();
  inline void clear_has_file();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int requesttype_;
  int requestcode_;
  ::std::string* message_;
  int returncode_;
  ::google::protobuf::int32 intvalue_;
  ::network_io::FileInfo* file_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// required .network_io.Request.Type type = 1;
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::network_io::Request_Type Request::type() const {
  return static_cast< ::network_io::Request_Type >(type_);
}
inline void Request::set_type(::network_io::Request_Type value) {
  assert(::network_io::Request_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required .network_io.Request.Code code = 2;
inline bool Request::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::network_io::Request_Code Request::code() const {
  return static_cast< ::network_io::Request_Code >(code_);
}
inline void Request::set_code(::network_io::Request_Code value) {
  assert(::network_io::Request_Code_IsValid(value));
  set_has_code();
  code_ = value;
}

// required .network_io.Request.Code extraCode = 3;
inline bool Request::has_extracode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_extracode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_extracode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_extracode() {
  extracode_ = 0;
  clear_has_extracode();
}
inline ::network_io::Request_Code Request::extracode() const {
  return static_cast< ::network_io::Request_Code >(extracode_);
}
inline void Request::set_extracode(::network_io::Request_Code value) {
  assert(::network_io::Request_Code_IsValid(value));
  set_has_extracode();
  extracode_ = value;
}

// optional string securityToken = 4;
inline bool Request::has_securitytoken() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_securitytoken() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_securitytoken() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_securitytoken() {
  if (securitytoken_ != &::google::protobuf::internal::kEmptyString) {
    securitytoken_->clear();
  }
  clear_has_securitytoken();
}
inline const ::std::string& Request::securitytoken() const {
  return *securitytoken_;
}
inline void Request::set_securitytoken(const ::std::string& value) {
  set_has_securitytoken();
  if (securitytoken_ == &::google::protobuf::internal::kEmptyString) {
    securitytoken_ = new ::std::string;
  }
  securitytoken_->assign(value);
}
inline void Request::set_securitytoken(const char* value) {
  set_has_securitytoken();
  if (securitytoken_ == &::google::protobuf::internal::kEmptyString) {
    securitytoken_ = new ::std::string;
  }
  securitytoken_->assign(value);
}
inline void Request::set_securitytoken(const char* value, size_t size) {
  set_has_securitytoken();
  if (securitytoken_ == &::google::protobuf::internal::kEmptyString) {
    securitytoken_ = new ::std::string;
  }
  securitytoken_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_securitytoken() {
  set_has_securitytoken();
  if (securitytoken_ == &::google::protobuf::internal::kEmptyString) {
    securitytoken_ = new ::std::string;
  }
  return securitytoken_;
}
inline ::std::string* Request::release_securitytoken() {
  clear_has_securitytoken();
  if (securitytoken_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = securitytoken_;
    securitytoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_securitytoken(::std::string* securitytoken) {
  if (securitytoken_ != &::google::protobuf::internal::kEmptyString) {
    delete securitytoken_;
  }
  if (securitytoken) {
    set_has_securitytoken();
    securitytoken_ = securitytoken;
  } else {
    clear_has_securitytoken();
    securitytoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 intExtra = 5;
inline bool Request::has_intextra() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_intextra() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_intextra() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_intextra() {
  intextra_ = 0;
  clear_has_intextra();
}
inline ::google::protobuf::int32 Request::intextra() const {
  return intextra_;
}
inline void Request::set_intextra(::google::protobuf::int32 value) {
  set_has_intextra();
  intextra_ = value;
}

// optional string stringExtra = 6;
inline bool Request::has_stringextra() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Request::set_has_stringextra() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Request::clear_has_stringextra() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Request::clear_stringextra() {
  if (stringextra_ != &::google::protobuf::internal::kEmptyString) {
    stringextra_->clear();
  }
  clear_has_stringextra();
}
inline const ::std::string& Request::stringextra() const {
  return *stringextra_;
}
inline void Request::set_stringextra(const ::std::string& value) {
  set_has_stringextra();
  if (stringextra_ == &::google::protobuf::internal::kEmptyString) {
    stringextra_ = new ::std::string;
  }
  stringextra_->assign(value);
}
inline void Request::set_stringextra(const char* value) {
  set_has_stringextra();
  if (stringextra_ == &::google::protobuf::internal::kEmptyString) {
    stringextra_ = new ::std::string;
  }
  stringextra_->assign(value);
}
inline void Request::set_stringextra(const char* value, size_t size) {
  set_has_stringextra();
  if (stringextra_ == &::google::protobuf::internal::kEmptyString) {
    stringextra_ = new ::std::string;
  }
  stringextra_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_stringextra() {
  set_has_stringextra();
  if (stringextra_ == &::google::protobuf::internal::kEmptyString) {
    stringextra_ = new ::std::string;
  }
  return stringextra_;
}
inline ::std::string* Request::release_stringextra() {
  clear_has_stringextra();
  if (stringextra_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stringextra_;
    stringextra_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_stringextra(::std::string* stringextra) {
  if (stringextra_ != &::google::protobuf::internal::kEmptyString) {
    delete stringextra_;
  }
  if (stringextra) {
    set_has_stringextra();
    stringextra_ = stringextra;
  } else {
    clear_has_stringextra();
    stringextra_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FileInfo

// required string absoluteFilePath = 1;
inline bool FileInfo::has_absolutefilepath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileInfo::set_has_absolutefilepath() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileInfo::clear_has_absolutefilepath() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileInfo::clear_absolutefilepath() {
  if (absolutefilepath_ != &::google::protobuf::internal::kEmptyString) {
    absolutefilepath_->clear();
  }
  clear_has_absolutefilepath();
}
inline const ::std::string& FileInfo::absolutefilepath() const {
  return *absolutefilepath_;
}
inline void FileInfo::set_absolutefilepath(const ::std::string& value) {
  set_has_absolutefilepath();
  if (absolutefilepath_ == &::google::protobuf::internal::kEmptyString) {
    absolutefilepath_ = new ::std::string;
  }
  absolutefilepath_->assign(value);
}
inline void FileInfo::set_absolutefilepath(const char* value) {
  set_has_absolutefilepath();
  if (absolutefilepath_ == &::google::protobuf::internal::kEmptyString) {
    absolutefilepath_ = new ::std::string;
  }
  absolutefilepath_->assign(value);
}
inline void FileInfo::set_absolutefilepath(const char* value, size_t size) {
  set_has_absolutefilepath();
  if (absolutefilepath_ == &::google::protobuf::internal::kEmptyString) {
    absolutefilepath_ = new ::std::string;
  }
  absolutefilepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileInfo::mutable_absolutefilepath() {
  set_has_absolutefilepath();
  if (absolutefilepath_ == &::google::protobuf::internal::kEmptyString) {
    absolutefilepath_ = new ::std::string;
  }
  return absolutefilepath_;
}
inline ::std::string* FileInfo::release_absolutefilepath() {
  clear_has_absolutefilepath();
  if (absolutefilepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = absolutefilepath_;
    absolutefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileInfo::set_allocated_absolutefilepath(::std::string* absolutefilepath) {
  if (absolutefilepath_ != &::google::protobuf::internal::kEmptyString) {
    delete absolutefilepath_;
  }
  if (absolutefilepath) {
    set_has_absolutefilepath();
    absolutefilepath_ = absolutefilepath;
  } else {
    clear_has_absolutefilepath();
    absolutefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string filename = 2;
inline bool FileInfo::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileInfo::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileInfo::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileInfo::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& FileInfo::filename() const {
  return *filename_;
}
inline void FileInfo::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void FileInfo::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void FileInfo::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileInfo::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* FileInfo::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileInfo::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool isDirectory = 3;
inline bool FileInfo::has_isdirectory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileInfo::set_has_isdirectory() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileInfo::clear_has_isdirectory() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileInfo::clear_isdirectory() {
  isdirectory_ = false;
  clear_has_isdirectory();
}
inline bool FileInfo::isdirectory() const {
  return isdirectory_;
}
inline void FileInfo::set_isdirectory(bool value) {
  set_has_isdirectory();
  isdirectory_ = value;
}

// required int32 size = 4;
inline bool FileInfo::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileInfo::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileInfo::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 FileInfo::size() const {
  return size_;
}
inline void FileInfo::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// repeated .network_io.FileInfo child = 5;
inline int FileInfo::child_size() const {
  return child_.size();
}
inline void FileInfo::clear_child() {
  child_.Clear();
}
inline const ::network_io::FileInfo& FileInfo::child(int index) const {
  return child_.Get(index);
}
inline ::network_io::FileInfo* FileInfo::mutable_child(int index) {
  return child_.Mutable(index);
}
inline ::network_io::FileInfo* FileInfo::add_child() {
  return child_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::network_io::FileInfo >&
FileInfo::child() const {
  return child_;
}
inline ::google::protobuf::RepeatedPtrField< ::network_io::FileInfo >*
FileInfo::mutable_child() {
  return &child_;
}

// -------------------------------------------------------------------

// Response

// required .network_io.Request.Type requestType = 1;
inline bool Response::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_requesttype() {
  requesttype_ = 0;
  clear_has_requesttype();
}
inline ::network_io::Request_Type Response::requesttype() const {
  return static_cast< ::network_io::Request_Type >(requesttype_);
}
inline void Response::set_requesttype(::network_io::Request_Type value) {
  assert(::network_io::Request_Type_IsValid(value));
  set_has_requesttype();
  requesttype_ = value;
}

// required .network_io.Request.Code requestCode = 2;
inline bool Response::has_requestcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_requestcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_requestcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_requestcode() {
  requestcode_ = 0;
  clear_has_requestcode();
}
inline ::network_io::Request_Code Response::requestcode() const {
  return static_cast< ::network_io::Request_Code >(requestcode_);
}
inline void Response::set_requestcode(::network_io::Request_Code value) {
  assert(::network_io::Request_Code_IsValid(value));
  set_has_requestcode();
  requestcode_ = value;
}

// required .network_io.Response.ReturnCode returnCode = 3 [default = RC_ERROR];
inline bool Response::has_returncode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_returncode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_returncode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_returncode() {
  returncode_ = 1;
  clear_has_returncode();
}
inline ::network_io::Response_ReturnCode Response::returncode() const {
  return static_cast< ::network_io::Response_ReturnCode >(returncode_);
}
inline void Response::set_returncode(::network_io::Response_ReturnCode value) {
  assert(::network_io::Response_ReturnCode_IsValid(value));
  set_has_returncode();
  returncode_ = value;
}

// required string message = 4;
inline bool Response::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Response::message() const {
  return *message_;
}
inline void Response::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Response::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Response::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* Response::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 intValue = 5;
inline bool Response::has_intvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response::set_has_intvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Response::clear_has_intvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Response::clear_intvalue() {
  intvalue_ = 0;
  clear_has_intvalue();
}
inline ::google::protobuf::int32 Response::intvalue() const {
  return intvalue_;
}
inline void Response::set_intvalue(::google::protobuf::int32 value) {
  set_has_intvalue();
  intvalue_ = value;
}

// optional .network_io.FileInfo file = 6;
inline bool Response::has_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Response::set_has_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Response::clear_has_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Response::clear_file() {
  if (file_ != NULL) file_->::network_io::FileInfo::Clear();
  clear_has_file();
}
inline const ::network_io::FileInfo& Response::file() const {
  return file_ != NULL ? *file_ : *default_instance_->file_;
}
inline ::network_io::FileInfo* Response::mutable_file() {
  set_has_file();
  if (file_ == NULL) file_ = new ::network_io::FileInfo;
  return file_;
}
inline ::network_io::FileInfo* Response::release_file() {
  clear_has_file();
  ::network_io::FileInfo* temp = file_;
  file_ = NULL;
  return temp;
}
inline void Response::set_allocated_file(::network_io::FileInfo* file) {
  delete file_;
  file_ = file;
  if (file) {
    set_has_file();
  } else {
    clear_has_file();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace network_io

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network_io::Request_Type>() {
  return ::network_io::Request_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network_io::Request_Code>() {
  return ::network_io::Request_Code_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network_io::Response_ReturnCode>() {
  return ::network_io::Response_ReturnCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
