// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote_command.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "remote_command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace network_io {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_Code_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Response_ReturnCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_remote_5fcommand_2eproto() {
  protobuf_AddDesc_remote_5fcommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "remote_command.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, securitytoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, intextra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, stringextra_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_Type_descriptor_ = Request_descriptor_->enum_type(0);
  Request_Code_descriptor_ = Request_descriptor_->enum_type(1);
  FileInfo_descriptor_ = file->message_type(1);
  static const int FileInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, absolutefilepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, isdirectory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, child_),
  };
  FileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileInfo_descriptor_,
      FileInfo::default_instance_,
      FileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileInfo));
  Response_descriptor_ = file->message_type(2);
  static const int Response_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, requestcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, returncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, intvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, file_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  Response_ReturnCode_descriptor_ = Response_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_remote_5fcommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileInfo_descriptor_, &FileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_remote_5fcommand_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete FileInfo::default_instance_;
  delete FileInfo_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_remote_5fcommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024remote_command.proto\022\nnetwork_io\"\375\020\n\007R"
    "equest\022&\n\004type\030\001 \002(\0162\030.network_io.Reques"
    "t.Type\022&\n\004code\030\002 \002(\0162\030.network_io.Reques"
    "t.Code\022\025\n\rsecurityToken\030\003 \001(\t\022\020\n\010intExtr"
    "a\030\004 \001(\005\022\023\n\013stringExtra\030\005 \001(\t\"K\n\004Type\022\n\n\006"
    "SIMPLE\020\000\022\014\n\010EXPLORER\020\001\022\014\n\010KEYBOARD\020\002\022\006\n\002"
    "AI\020\003\022\n\n\006VOLUME\020\004\022\007\n\003APP\020\005\"\226\017\n\004Code\022\010\n\004NO"
    "NE\020\000\022\n\n\006DEFINE\020\001\022\n\n\006STATUS\020\002\022\006\n\002ON\020\003\022\007\n\003"
    "OFF\020\004\022\010\n\004PING\020\005\022\010\n\004TEST\020\006\022\017\n\013KILL_SERVER"
    "\020\007\022\014\n\010SHUTDOWN\020\010\022\021\n\rSWITCH_WINDOW\020\t\022\010\n\004L"
    "OCK\020\n\022\010\n\004MUTE\020\013\022\007\n\003SAY\020\014\022\013\n\007DPAD_UP\020\r\022\r\n"
    "\tDPAD_DOWN\020\016\022\r\n\tDPAD_LEFT\020\017\022\016\n\nDPAD_RIGH"
    "T\020\020\022\024\n\020MEDIA_PLAY_PAUSE\020\024\022\016\n\nMEDIA_STOP\020"
    "\025\022\022\n\016MEDIA_PREVIOUS\020\026\022\016\n\nMEDIA_NEXT\020\027\022\014\n"
    "\010MEDIA_FF\020\030\022\020\n\014MEDIA_REWIND\020\031\022\017\n\013QUERY_R"
    "OOTS\020\032\022\022\n\016QUERY_CHILDREN\020\033\022\024\n\020OPEN_SERVE"
    "R_SIDE\020\034\022\024\n\020OPEN_CLIENT_SIDE\020\035\022\020\n\014KEYCOD"
    "E_CTRL\020\036\022\021\n\rKEYCODE_SHIFT\020\037\022\024\n\020KEYCODE_A"
    "LT_LEFT\020 \022\025\n\021KEYCODE_ALT_RIGHT\020!\022\023\n\017KEYC"
    "ODE_WINDOWS\020\"\022\021\n\rKEYCODE_ENTER\020(\022\022\n\016KEYC"
    "ODE_ESCAPE\020)\022\022\n\016KEYCODE_DELETE\020*\022\021\n\rKEYC"
    "ODE_SPACE\020+\022\025\n\021KEYCODE_BACKSPACE\020,\022\017\n\013KE"
    "YCODE_TAB\020-\022\016\n\tKEYCODE_0\020\364\003\022\016\n\tKEYCODE_1"
    "\020\365\003\022\016\n\tKEYCODE_2\020\366\003\022\016\n\tKEYCODE_3\020\367\003\022\016\n\tK"
    "EYCODE_4\020\370\003\022\016\n\tKEYCODE_5\020\371\003\022\016\n\tKEYCODE_6"
    "\020\372\003\022\016\n\tKEYCODE_7\020\373\003\022\016\n\tKEYCODE_8\020\374\003\022\016\n\tK"
    "EYCODE_9\020\375\003\022\016\n\tKEYCODE_A\020\376\003\022\016\n\tKEYCODE_B"
    "\020\377\003\022\016\n\tKEYCODE_C\020\200\004\022\016\n\tKEYCODE_D\020\201\004\022\016\n\tK"
    "EYCODE_E\020\202\004\022\016\n\tKEYCODE_F\020\203\004\022\016\n\tKEYCODE_G"
    "\020\204\004\022\016\n\tKEYCODE_H\020\205\004\022\016\n\tKEYCODE_I\020\206\004\022\016\n\tK"
    "EYCODE_J\020\207\004\022\016\n\tKEYCODE_K\020\210\004\022\016\n\tKEYCODE_L"
    "\020\211\004\022\016\n\tKEYCODE_M\020\212\004\022\016\n\tKEYCODE_N\020\213\004\022\016\n\tK"
    "EYCODE_O\020\214\004\022\016\n\tKEYCODE_P\020\215\004\022\016\n\tKEYCODE_Q"
    "\020\216\004\022\016\n\tKEYCODE_R\020\217\004\022\016\n\tKEYCODE_S\020\220\004\022\016\n\tK"
    "EYCODE_T\020\221\004\022\016\n\tKEYCODE_U\020\222\004\022\016\n\tKEYCODE_V"
    "\020\223\004\022\016\n\tKEYCODE_W\020\224\004\022\016\n\tKEYCODE_X\020\225\004\022\016\n\tK"
    "EYCODE_Y\020\226\004\022\016\n\tKEYCODE_Z\020\227\004\022\017\n\nKEYCODE_F"
    "1\020\246\004\022\017\n\nKEYCODE_F2\020\247\004\022\017\n\nKEYCODE_F3\020\250\004\022\017"
    "\n\nKEYCODE_F4\020\251\004\022\017\n\nKEYCODE_F5\020\252\004\022\017\n\nKEYC"
    "ODE_F6\020\253\004\022\017\n\nKEYCODE_F7\020\254\004\022\017\n\nKEYCODE_F8"
    "\020\255\004\022\017\n\nKEYCODE_F9\020\256\004\022\020\n\013KEYCODE_F10\020\257\004\022\020"
    "\n\013KEYCODE_F11\020\260\004\022\020\n\013KEYCODE_F12\020\261\004\022\023\n\016KE"
    "YCODE_EQUALS\020\330\004\022\022\n\rKEYCODE_MINUS\020\331\004\022\021\n\014K"
    "EYCODE_PLUS\020\332\004\022\021\n\014KEYCODE_STAR\020\333\004\022\022\n\rKEY"
    "CODE_SLASH\020\334\004\022\026\n\021KEYCODE_BACKSLASH\020\335\004\022\027\n"
    "\022KEYCODE_UNDERSCORE\020\336\004\022\021\n\014KEYCODE_PIPE\020\337"
    "\004\022\022\n\rKEYCODE_COMMA\020\340\004\022\024\n\017KEYCODE_PERIODE"
    "\020\341\004\022\022\n\rKEYCODE_COLON\020\342\004\022\026\n\021KEYCODE_SEMIC"
    "OLON\020\343\004\022\017\n\nKEYCODE_AT\020\344\004\022\027\n\022KEYCODE_APOS"
    "TROPHE\020\345\004\022\027\n\022KEYCODE_LEFT_PAREN\020\212\005\022\031\n\024KE"
    "YCODE_RIGHT_PARENT\020\213\005\022\031\n\024KEYCODE_LEFT_BR"
    "ACKET\020\214\005\022\032\n\025KEYCODE_RIGHT_BRACKET\020\215\005\022\037\n\032"
    "KEYCODE_LEFT_CURLY_BRACKET\020\216\005\022 \n\033KEYCODE"
    "_RIGHT_CURLY_BRACKET\020\217\005\022\037\n\032KEYCODE_LEFT_"
    "ANGLE_BRACKET\020\220\005\022 \n\033KEYCODE_RIGHT_ANGLE_"
    "BRACKET\020\221\005\"~\n\010FileInfo\022\030\n\020absoluteFilePa"
    "th\030\001 \002(\t\022\020\n\010filename\030\002 \002(\t\022\023\n\013isDirector"
    "y\030\003 \002(\010\022\014\n\004size\030\004 \002(\r\022#\n\005child\030\005 \003(\0132\024.n"
    "etwork_io.FileInfo\"\232\002\n\010Response\022-\n\013reque"
    "stType\030\001 \002(\0162\030.network_io.Request.Type\022-"
    "\n\013requestCode\030\002 \002(\0162\030.network_io.Request"
    ".Code\022=\n\nreturnCode\030\003 \002(\0162\037.network_io.R"
    "esponse.ReturnCode:\010RC_ERROR\022\017\n\007message\030"
    "\004 \002(\t\022\020\n\010intValue\030\005 \001(\005\022\"\n\004file\030\006 \001(\0132\024."
    "network_io.FileInfo\"*\n\nReturnCode\022\016\n\nRC_"
    "SUCCESS\020\000\022\014\n\010RC_ERROR\020\001B0\n\037org.es.uremot"
    "e.request.protobufB\rRemoteCommand", 2673);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "remote_command.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  FileInfo::default_instance_ = new FileInfo();
  Response::default_instance_ = new Response();
  Request::default_instance_->InitAsDefaultInstance();
  FileInfo::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_remote_5fcommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_remote_5fcommand_2eproto {
  StaticDescriptorInitializer_remote_5fcommand_2eproto() {
    protobuf_AddDesc_remote_5fcommand_2eproto();
  }
} static_descriptor_initializer_remote_5fcommand_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Request_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Type_descriptor_;
}
bool Request_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_Type Request::SIMPLE;
const Request_Type Request::EXPLORER;
const Request_Type Request::KEYBOARD;
const Request_Type Request::AI;
const Request_Type Request::VOLUME;
const Request_Type Request::APP;
const Request_Type Request::Type_MIN;
const Request_Type Request::Type_MAX;
const int Request::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Request_Code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Code_descriptor_;
}
bool Request_Code_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 557:
    case 558:
    case 559:
    case 560:
    case 561:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 650:
    case 651:
    case 652:
    case 653:
    case 654:
    case 655:
    case 656:
    case 657:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_Code Request::NONE;
const Request_Code Request::DEFINE;
const Request_Code Request::STATUS;
const Request_Code Request::ON;
const Request_Code Request::OFF;
const Request_Code Request::PING;
const Request_Code Request::TEST;
const Request_Code Request::KILL_SERVER;
const Request_Code Request::SHUTDOWN;
const Request_Code Request::SWITCH_WINDOW;
const Request_Code Request::LOCK;
const Request_Code Request::MUTE;
const Request_Code Request::SAY;
const Request_Code Request::DPAD_UP;
const Request_Code Request::DPAD_DOWN;
const Request_Code Request::DPAD_LEFT;
const Request_Code Request::DPAD_RIGHT;
const Request_Code Request::MEDIA_PLAY_PAUSE;
const Request_Code Request::MEDIA_STOP;
const Request_Code Request::MEDIA_PREVIOUS;
const Request_Code Request::MEDIA_NEXT;
const Request_Code Request::MEDIA_FF;
const Request_Code Request::MEDIA_REWIND;
const Request_Code Request::QUERY_ROOTS;
const Request_Code Request::QUERY_CHILDREN;
const Request_Code Request::OPEN_SERVER_SIDE;
const Request_Code Request::OPEN_CLIENT_SIDE;
const Request_Code Request::KEYCODE_CTRL;
const Request_Code Request::KEYCODE_SHIFT;
const Request_Code Request::KEYCODE_ALT_LEFT;
const Request_Code Request::KEYCODE_ALT_RIGHT;
const Request_Code Request::KEYCODE_WINDOWS;
const Request_Code Request::KEYCODE_ENTER;
const Request_Code Request::KEYCODE_ESCAPE;
const Request_Code Request::KEYCODE_DELETE;
const Request_Code Request::KEYCODE_SPACE;
const Request_Code Request::KEYCODE_BACKSPACE;
const Request_Code Request::KEYCODE_TAB;
const Request_Code Request::KEYCODE_0;
const Request_Code Request::KEYCODE_1;
const Request_Code Request::KEYCODE_2;
const Request_Code Request::KEYCODE_3;
const Request_Code Request::KEYCODE_4;
const Request_Code Request::KEYCODE_5;
const Request_Code Request::KEYCODE_6;
const Request_Code Request::KEYCODE_7;
const Request_Code Request::KEYCODE_8;
const Request_Code Request::KEYCODE_9;
const Request_Code Request::KEYCODE_A;
const Request_Code Request::KEYCODE_B;
const Request_Code Request::KEYCODE_C;
const Request_Code Request::KEYCODE_D;
const Request_Code Request::KEYCODE_E;
const Request_Code Request::KEYCODE_F;
const Request_Code Request::KEYCODE_G;
const Request_Code Request::KEYCODE_H;
const Request_Code Request::KEYCODE_I;
const Request_Code Request::KEYCODE_J;
const Request_Code Request::KEYCODE_K;
const Request_Code Request::KEYCODE_L;
const Request_Code Request::KEYCODE_M;
const Request_Code Request::KEYCODE_N;
const Request_Code Request::KEYCODE_O;
const Request_Code Request::KEYCODE_P;
const Request_Code Request::KEYCODE_Q;
const Request_Code Request::KEYCODE_R;
const Request_Code Request::KEYCODE_S;
const Request_Code Request::KEYCODE_T;
const Request_Code Request::KEYCODE_U;
const Request_Code Request::KEYCODE_V;
const Request_Code Request::KEYCODE_W;
const Request_Code Request::KEYCODE_X;
const Request_Code Request::KEYCODE_Y;
const Request_Code Request::KEYCODE_Z;
const Request_Code Request::KEYCODE_F1;
const Request_Code Request::KEYCODE_F2;
const Request_Code Request::KEYCODE_F3;
const Request_Code Request::KEYCODE_F4;
const Request_Code Request::KEYCODE_F5;
const Request_Code Request::KEYCODE_F6;
const Request_Code Request::KEYCODE_F7;
const Request_Code Request::KEYCODE_F8;
const Request_Code Request::KEYCODE_F9;
const Request_Code Request::KEYCODE_F10;
const Request_Code Request::KEYCODE_F11;
const Request_Code Request::KEYCODE_F12;
const Request_Code Request::KEYCODE_EQUALS;
const Request_Code Request::KEYCODE_MINUS;
const Request_Code Request::KEYCODE_PLUS;
const Request_Code Request::KEYCODE_STAR;
const Request_Code Request::KEYCODE_SLASH;
const Request_Code Request::KEYCODE_BACKSLASH;
const Request_Code Request::KEYCODE_UNDERSCORE;
const Request_Code Request::KEYCODE_PIPE;
const Request_Code Request::KEYCODE_COMMA;
const Request_Code Request::KEYCODE_PERIODE;
const Request_Code Request::KEYCODE_COLON;
const Request_Code Request::KEYCODE_SEMICOLON;
const Request_Code Request::KEYCODE_AT;
const Request_Code Request::KEYCODE_APOSTROPHE;
const Request_Code Request::KEYCODE_LEFT_PAREN;
const Request_Code Request::KEYCODE_RIGHT_PARENT;
const Request_Code Request::KEYCODE_LEFT_BRACKET;
const Request_Code Request::KEYCODE_RIGHT_BRACKET;
const Request_Code Request::KEYCODE_LEFT_CURLY_BRACKET;
const Request_Code Request::KEYCODE_RIGHT_CURLY_BRACKET;
const Request_Code Request::KEYCODE_LEFT_ANGLE_BRACKET;
const Request_Code Request::KEYCODE_RIGHT_ANGLE_BRACKET;
const Request_Code Request::Code_MIN;
const Request_Code Request::Code_MAX;
const int Request::Code_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Request::kTypeFieldNumber;
const int Request::kCodeFieldNumber;
const int Request::kSecurityTokenFieldNumber;
const int Request::kIntExtraFieldNumber;
const int Request::kStringExtraFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  code_ = 0;
  securitytoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  intextra_ = 0;
  stringextra_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (securitytoken_ != &::google::protobuf::internal::kEmptyString) {
    delete securitytoken_;
  }
  if (stringextra_ != &::google::protobuf::internal::kEmptyString) {
    delete stringextra_;
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_5fcommand_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    code_ = 0;
    if (has_securitytoken()) {
      if (securitytoken_ != &::google::protobuf::internal::kEmptyString) {
        securitytoken_->clear();
      }
    }
    intextra_ = 0;
    if (has_stringextra()) {
      if (stringextra_ != &::google::protobuf::internal::kEmptyString) {
        stringextra_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network_io.Request.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network_io::Request_Type_IsValid(value)) {
            set_type(static_cast< ::network_io::Request_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // required .network_io.Request.Code code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network_io::Request_Code_IsValid(value)) {
            set_code(static_cast< ::network_io::Request_Code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_securityToken;
        break;
      }

      // optional string securityToken = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_securityToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securitytoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->securitytoken().data(), this->securitytoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_intExtra;
        break;
      }

      // optional int32 intExtra = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intExtra:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intextra_)));
          set_has_intextra();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stringExtra;
        break;
      }

      // optional string stringExtra = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringExtra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringextra()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringextra().data(), this->stringextra().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network_io.Request.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .network_io.Request.Code code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }

  // optional string securityToken = 3;
  if (has_securitytoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->securitytoken().data(), this->securitytoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->securitytoken(), output);
  }

  // optional int32 intExtra = 4;
  if (has_intextra()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->intextra(), output);
  }

  // optional string stringExtra = 5;
  if (has_stringextra()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringextra().data(), this->stringextra().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->stringextra(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network_io.Request.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .network_io.Request.Code code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->code(), target);
  }

  // optional string securityToken = 3;
  if (has_securitytoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->securitytoken().data(), this->securitytoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->securitytoken(), target);
  }

  // optional int32 intExtra = 4;
  if (has_intextra()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->intextra(), target);
  }

  // optional string stringExtra = 5;
  if (has_stringextra()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringextra().data(), this->stringextra().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stringextra(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network_io.Request.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .network_io.Request.Code code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

    // optional string securityToken = 3;
    if (has_securitytoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->securitytoken());
    }

    // optional int32 intExtra = 4;
    if (has_intextra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intextra());
    }

    // optional string stringExtra = 5;
    if (has_stringextra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringextra());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_securitytoken()) {
      set_securitytoken(from.securitytoken());
    }
    if (from.has_intextra()) {
      set_intextra(from.intextra());
    }
    if (from.has_stringextra()) {
      set_stringextra(from.stringextra());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(code_, other->code_);
    std::swap(securitytoken_, other->securitytoken_);
    std::swap(intextra_, other->intextra_);
    std::swap(stringextra_, other->stringextra_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileInfo::kAbsoluteFilePathFieldNumber;
const int FileInfo::kFilenameFieldNumber;
const int FileInfo::kIsDirectoryFieldNumber;
const int FileInfo::kSizeFieldNumber;
const int FileInfo::kChildFieldNumber;
#endif  // !_MSC_VER

FileInfo::FileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileInfo::InitAsDefaultInstance() {
}

FileInfo::FileInfo(const FileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileInfo::SharedCtor() {
  _cached_size_ = 0;
  absolutefilepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isdirectory_ = false;
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileInfo::~FileInfo() {
  SharedDtor();
}

void FileInfo::SharedDtor() {
  if (absolutefilepath_ != &::google::protobuf::internal::kEmptyString) {
    delete absolutefilepath_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void FileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileInfo_descriptor_;
}

const FileInfo& FileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_5fcommand_2eproto();
  return *default_instance_;
}

FileInfo* FileInfo::default_instance_ = NULL;

FileInfo* FileInfo::New() const {
  return new FileInfo;
}

void FileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_absolutefilepath()) {
      if (absolutefilepath_ != &::google::protobuf::internal::kEmptyString) {
        absolutefilepath_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    isdirectory_ = false;
    size_ = 0u;
  }
  child_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string absoluteFilePath = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_absolutefilepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->absolutefilepath().data(), this->absolutefilepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // required string filename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isDirectory;
        break;
      }

      // required bool isDirectory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDirectory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdirectory_)));
          set_has_isdirectory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // required uint32 size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_child;
        break;
      }

      // repeated .network_io.FileInfo child = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_child()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_child;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string absoluteFilePath = 1;
  if (has_absolutefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolutefilepath().data(), this->absolutefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->absolutefilepath(), output);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // required bool isDirectory = 3;
  if (has_isdirectory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdirectory(), output);
  }

  // required uint32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  // repeated .network_io.FileInfo child = 5;
  for (int i = 0; i < this->child_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->child(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string absoluteFilePath = 1;
  if (has_absolutefilepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolutefilepath().data(), this->absolutefilepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->absolutefilepath(), target);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // required bool isDirectory = 3;
  if (has_isdirectory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdirectory(), target);
  }

  // required uint32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  // repeated .network_io.FileInfo child = 5;
  for (int i = 0; i < this->child_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->child(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string absoluteFilePath = 1;
    if (has_absolutefilepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->absolutefilepath());
    }

    // required string filename = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required bool isDirectory = 3;
    if (has_isdirectory()) {
      total_size += 1 + 1;
    }

    // required uint32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  // repeated .network_io.FileInfo child = 5;
  total_size += 1 * this->child_size();
  for (int i = 0; i < this->child_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->child(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileInfo::MergeFrom(const FileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  child_.MergeFrom(from.child_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_absolutefilepath()) {
      set_absolutefilepath(from.absolutefilepath());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_isdirectory()) {
      set_isdirectory(from.isdirectory());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfo::CopyFrom(const FileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < child_size(); i++) {
    if (!this->child(i).IsInitialized()) return false;
  }
  return true;
}

void FileInfo::Swap(FileInfo* other) {
  if (other != this) {
    std::swap(absolutefilepath_, other->absolutefilepath_);
    std::swap(filename_, other->filename_);
    std::swap(isdirectory_, other->isdirectory_);
    std::swap(size_, other->size_);
    child_.Swap(&other->child_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileInfo_descriptor_;
  metadata.reflection = FileInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Response_ReturnCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_ReturnCode_descriptor_;
}
bool Response_ReturnCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Response_ReturnCode Response::RC_SUCCESS;
const Response_ReturnCode Response::RC_ERROR;
const Response_ReturnCode Response::ReturnCode_MIN;
const Response_ReturnCode Response::ReturnCode_MAX;
const int Response::ReturnCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Response::kRequestTypeFieldNumber;
const int Response::kRequestCodeFieldNumber;
const int Response::kReturnCodeFieldNumber;
const int Response::kMessageFieldNumber;
const int Response::kIntValueFieldNumber;
const int Response::kFileFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response::InitAsDefaultInstance() {
  file_ = const_cast< ::network_io::FileInfo*>(&::network_io::FileInfo::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  requesttype_ = 0;
  requestcode_ = 0;
  returncode_ = 1;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  intvalue_ = 0;
  file_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  SharedDtor();
}

void Response::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
    delete file_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_remote_5fcommand_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requesttype_ = 0;
    requestcode_ = 0;
    returncode_ = 1;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    intvalue_ = 0;
    if (has_file()) {
      if (file_ != NULL) file_->::network_io::FileInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .network_io.Request.Type requestType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network_io::Request_Type_IsValid(value)) {
            set_requesttype(static_cast< ::network_io::Request_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_requestCode;
        break;
      }

      // required .network_io.Request.Code requestCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network_io::Request_Code_IsValid(value)) {
            set_requestcode(static_cast< ::network_io::Request_Code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_returnCode;
        break;
      }

      // required .network_io.Response.ReturnCode returnCode = 3 [default = RC_ERROR];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_returnCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::network_io::Response_ReturnCode_IsValid(value)) {
            set_returncode(static_cast< ::network_io::Response_ReturnCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // required string message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_intValue;
        break;
      }

      // optional int32 intValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intvalue_)));
          set_has_intvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_file;
        break;
      }

      // optional .network_io.FileInfo file = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .network_io.Request.Type requestType = 1;
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->requesttype(), output);
  }

  // required .network_io.Request.Code requestCode = 2;
  if (has_requestcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->requestcode(), output);
  }

  // required .network_io.Response.ReturnCode returnCode = 3 [default = RC_ERROR];
  if (has_returncode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->returncode(), output);
  }

  // required string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->message(), output);
  }

  // optional int32 intValue = 5;
  if (has_intvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->intvalue(), output);
  }

  // optional .network_io.FileInfo file = 6;
  if (has_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->file(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .network_io.Request.Type requestType = 1;
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->requesttype(), target);
  }

  // required .network_io.Request.Code requestCode = 2;
  if (has_requestcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->requestcode(), target);
  }

  // required .network_io.Response.ReturnCode returnCode = 3 [default = RC_ERROR];
  if (has_returncode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->returncode(), target);
  }

  // required string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  // optional int32 intValue = 5;
  if (has_intvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->intvalue(), target);
  }

  // optional .network_io.FileInfo file = 6;
  if (has_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->file(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .network_io.Request.Type requestType = 1;
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->requesttype());
    }

    // required .network_io.Request.Code requestCode = 2;
    if (has_requestcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->requestcode());
    }

    // required .network_io.Response.ReturnCode returnCode = 3 [default = RC_ERROR];
    if (has_returncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->returncode());
    }

    // required string message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 intValue = 5;
    if (has_intvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intvalue());
    }

    // optional .network_io.FileInfo file = 6;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_requestcode()) {
      set_requestcode(from.requestcode());
    }
    if (from.has_returncode()) {
      set_returncode(from.returncode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_intvalue()) {
      set_intvalue(from.intvalue());
    }
    if (from.has_file()) {
      mutable_file()->::network_io::FileInfo::MergeFrom(from.file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_file()) {
    if (!this->file().IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    std::swap(requestcode_, other->requestcode_);
    std::swap(returncode_, other->returncode_);
    std::swap(message_, other->message_);
    std::swap(intvalue_, other->intvalue_);
    std::swap(file_, other->file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace network_io

// @@protoc_insertion_point(global_scope)
